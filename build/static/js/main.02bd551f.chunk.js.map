{"version":3,"sources":["StateProvider.js","Header.js","firebase.js","SidebarOption.js","Sidebar.js","Message.js","ChatInput.js","Chat.js","reducer.js","Login.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","createContext","StateProvider","reducer","initialState","children","Provider","value","useReducer","useStateValue","useContext","Header","user","className","Avatar","src","photoURL","alt","displayName","placeholder","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","provider","GoogleAuthProvider","SidebarOption","Icon","id","addChannelOption","title","history","useHistory","onClick","channelName","prompt","collection","add","name","push","Sidebar","useState","channels","setChannels","useEffect","onSnapshot","snapshot","docs","map","doc","data","ExpandMoreIcon","AddIcon","channel","Message","message","timestamp","userImage","Date","toDate","toUTCString","ChatInput","channelId","input","setInput","onChange","e","target","toLowerCase","type","preventDefault","FieldValue","serverTimestamp","Chat","roomId","useParams","roomDetails","setRoomDetails","roomMessages","setRoomMessages","orderBy","StarBorderOutlined","InfoOutlined","actionTypes","state","action","console","log","Login","dispatch","Button","signInWithPopup","then","result","catch","error","alert","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02bd551f.chunk.js","sourcesContent":["import React, { createContext, useContext, useReducer } from \"react\";\r\n\r\nexport const StateContext = createContext();\r\n\r\nexport const StateProvider = ({ reducer, initialState, children }) => (\r\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\r\n        {children}\r\n    </StateContext.Provider>\r\n);\r\n\r\nexport const useStateValue = () => useContext(StateContext);\r\n","import React from 'react'\r\nimport './Header.css'\r\nimport { Avatar } from '@material-ui/core'\r\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nconst Header = () => {\r\n    const [{user}]=useStateValue()\r\n\r\n    return (\r\n        <div className='header' >\r\n            <div className=\"header__left\">\r\n                <Avatar className=\"header__avatar\" src={user?.photoURL} alt={user?.displayName} />\r\n                <AccessTimeIcon />\r\n            </div>\r\n\r\n            <div className=\"header__search\">\r\n                <SearchIcon />\r\n                <input placeholder=\"Search me\" />\r\n            </div>\r\n\r\n            <div className=\"header__right\">\r\n                <HelpOutlineIcon />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import firebase from 'firebase'\r\n\r\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD2L39nK-iSXNOONGTLXxz0nd1Yod_ompU\",\r\n    authDomain: \"slack-2-9c1f2.firebaseapp.com\",\r\n    databaseURL: \"https://slack-2-9c1f2.firebaseio.com\",\r\n    projectId: \"slack-2-9c1f2\",\r\n    storageBucket: \"slack-2-9c1f2.appspot.com\",\r\n    messagingSenderId: \"257315101302\",\r\n    appId: \"1:257315101302:web:19686dab731f08d1495d57\",\r\n    measurementId: \"G-CF6EFNF96X\"\r\n  };\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig)\r\n\r\nconst db = firebaseApp.firestore()\r\nconst auth = firebase.auth()\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\n\r\nexport { auth, provider }\r\nexport default db","import React from 'react'\r\nimport './SidebarOption.css'\r\nimport { useHistory } from \"react-router-dom\";\r\nimport db from './firebase'\r\n\r\nconst SidebarOption = ({ Icon, id, addChannelOption, title }) => {\r\n    const history = useHistory();\r\n\r\n    const selectChannel = () => {\r\n        if (id) {\r\n            history.push(`/room/${id}`)\r\n        } else {\r\n            history.push(title);\r\n        }\r\n    };\r\n\r\n    const addChannel = () => {\r\n        const channelName = prompt(\"Please enter the channel name\");\r\n\r\n        if (channelName) {\r\n            db.collection('rooms').add({\r\n                name: channelName\r\n            })\r\n        }\r\n    };\r\n    return (\r\n        <div className=\"sidebarOption\" onClick={addChannelOption ? addChannel : selectChannel}>\r\n            {Icon && <Icon className='sidebarOption__icon' />}\r\n            {Icon ? (\r\n                <h3>{title}</h3>\r\n            ) : (\r\n                    <h3 className=\"sidebarOption__channel\">\r\n                        <span className=\"sidebarOption__hash\"> # </span> {title}\r\n                    </h3>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarOption\r\n","import React, { useEffect, useState } from 'react'\r\nimport './Sidebar.css'\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\nimport SidebarOption from \"./SidebarOption\"\r\nimport InsertCommentIcon from '@material-ui/icons/InsertComment';\r\nimport InboxIcon from '@material-ui/icons/Inbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport AppsIcon from '@material-ui/icons/Apps';\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport db from './firebase'\r\nimport { useStateValue } from './StateProvider';\r\n\r\nconst Sidebar = () => {\r\n    const [channels, setChannels] = useState([]);\r\n    const [{user}]= useStateValue()\r\n\r\n    useEffect(() => {\r\n        db.collection('rooms').onSnapshot(snapshot => {\r\n            setChannels(\r\n                snapshot.docs.map(doc => ({\r\n                    id: doc.id,\r\n                    name: doc.data().name\r\n                })))\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className='sidebar' >\r\n            <div className=\"sidebar__header\">\r\n                <div className=\"sidebar__info\">\r\n                    <h2>Rozen-Slack_clone</h2>\r\n                    <h3>\r\n                        <FiberManualRecordIcon />\r\n                         {user?.displayName} \r\n                    </h3>\r\n                </div>\r\n                <CreateIcon />\r\n            </div>\r\n            <hr />\r\n            <SidebarOption Icon={ExpandMoreIcon} title=\"Channels\" />\r\n            <hr />\r\n            <SidebarOption Icon={AddIcon} addChannelOption title=\"Add Channel\" />\r\n\r\n            {\r\n                channels.map(channel => (\r\n                    <SidebarOption title={channel.name} id={channel.id} />\r\n                )\r\n                )\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import React from 'react'\r\nimport \"./Message.css\";\r\n\r\nfunction Message({ message, timestamp, user, userImage }) {\r\n    return (\r\n        <div className=\"message\">\r\n            <img src={userImage} alt=\"\" />\r\n            <div className=\"message__info\">\r\n                <h4>\r\n                    {user}{\" \"}\r\n                    <span className=\"message__timestamp\">\r\n                        {new Date(timestamp?.toDate()).toUTCString()}\r\n                    </span>\r\n                </h4>\r\n                <p>{message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import { Button } from '@material-ui/core';\r\nimport React, { useState } from 'react'\r\nimport \"./ChatInput.css\";\r\nimport db from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\n\r\nfunction ChatInput({ channelName, channelId }) {\r\n    const [input, setInput] = useState(\"\");\r\n    const [{ user }] = useStateValue();\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (channelId) {\r\n            db.collection(\"rooms\").doc(channelId).collection(\"messages\").add({\r\n                message: input,\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                user: user.displayName,\r\n                userImage: user.photoURL,\r\n            });\r\n        }\r\n        setInput(\"\");\r\n    };\r\n    return (\r\n        <div className=\"chatInput\">\r\n            <form>\r\n                <input\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                    placeholder={`Message #${channelName?.toLowerCase()}`}\r\n                />\r\n                <button type=\"sumbit\" onClick={sendMessage}>SEND</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatInput\r\n","import React, { useState, useEffect } from 'react'\r\nimport \"./Chat.css\"\r\nimport { useParams } from \"react-router-dom\"\r\nimport { InfoOutlined, StarBorderOutlined } from '@material-ui/icons';\r\nimport db from './firebase'\r\nimport Message from './Message'\r\nimport ChatInput from './ChatInput';\r\n\r\nconst Chat = () => {\r\n    const { roomId } = useParams();\r\n    const [roomDetails, setRoomDetails] = useState(null);\r\n    const [roomMessages, setRoomMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        if (roomId) {\r\n            db.collection(\"rooms\")\r\n                .doc(roomId)\r\n                .onSnapshot((snapshot) => setRoomDetails(snapshot.data()));\r\n        }\r\n\r\n        db.collection(\"rooms\")\r\n            .doc(roomId)\r\n            .collection(\"messages\")\r\n            .orderBy(\"timestamp\", \"asc\")\r\n            .onSnapshot((snapshot) =>\r\n                setRoomMessages(snapshot.docs.map((doc) => doc.data()))\r\n            );\r\n    }, [roomId])\r\n\r\n    return (\r\n        <div className=\"chat\">\r\n            <div className=\"chat__header\">\r\n                <div className=\"chat__headerLeft\">\r\n                    <h4 className=\"chat__channelName\">\r\n                        <strong> #{roomDetails?.name} </strong>\r\n                        <StarBorderOutlined />\r\n                    </h4>\r\n                </div>\r\n\r\n                <div className=\"chat__headerRight\">\r\n                    <p><InfoOutlined /> Details</p>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"chat__messages\">\r\n                {roomMessages.map(({ message, timestamp, user, userImage }) => (\r\n                    <Message\r\n                        message={message}\r\n                        timestamp={timestamp}\r\n                        user={user}\r\n                        userImage={userImage}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <ChatInput channelName={roomDetails?.name} channelId={roomId} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","export const initialState = {\r\n    user: null,\r\n  };\r\n  \r\n  export const actionTypes = {\r\n    SET_USER: \"SET_USER\",\r\n  };\r\n  \r\n  const reducer = (state, action) => {\r\n    console.log(action);\r\n  \r\n    switch (action.type) {\r\n      case actionTypes.SET_USER:\r\n        return {\r\n          ...state,\r\n          user: action.user,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  ","import React from 'react'\r\nimport \"./Login.css\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { auth, provider } from \"./firebase\";\r\nimport { useStateValue } from \"./StateProvider\";\r\nimport { actionTypes } from \"./reducer\";\r\n\r\nconst Login = () => {\r\n    const [state, dispatch] = useStateValue();\r\n\r\n    const signIn = () => {\r\n        auth.signInWithPopup(provider)\r\n            .then((result) => {\r\n                dispatch({\r\n                    type: actionTypes.SET_USER,\r\n                    user: result.user,\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                alert(error.message);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"login\" >\r\n            <div className=\"login__container\">\r\n                <img\r\n                    src=\"https://a.slack-edge.com/80588/marketing/img/icons/icon_slack_hash_colored.png\"\r\n                    alt=\"\"\r\n                />\r\n\r\n                <h1>Signin to Slack-clone</h1>\r\n                <p>By Rozen</p>\r\n                <Button onClick={signIn}>Sign in with Google</Button>\r\n            </div>\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport Sidebar from './Sidebar';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Chat from './Chat'\r\nimport Login from './Login';\r\nimport { useStateValue } from './StateProvider';\r\n\r\nfunction App() {\r\n  const [{ user }, dispatch] = useStateValue();\r\n\r\n  console.log(user)\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <Router>\r\n        {!user ? (\r\n          <Login />\r\n        ) : (\r\n\r\n            <>\r\n              <Header />\r\n              <div className=\"app__body\">\r\n                <Sidebar />\r\n                <Switch>\r\n                  <Route path=\"/room/:roomId\">\r\n                    <Chat />\r\n                  </Route>\r\n                  <Route path=\"/\">\r\n                    <h1>Welcome to Slack -clone</h1>\r\n                  </Route>\r\n                </Switch>\r\n              </div>\r\n            </>\r\n          )}\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { StateProvider } from './StateProvider';\r\nimport reducer, { initialState } from './reducer';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <StateProvider initialState={initialState} reducer={reducer} >\r\n      <App />\r\n    </StateProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}